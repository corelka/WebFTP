using System;
using System.Linq;
using Microsoft.AspNet.Mvc;
using System.IO;
using Microsoft.Extensions.PlatformAbstractions;
using WebFTP.Models;

namespace WebFTP.Controllers
{
    class Files
    {
        public static PathInfo FilesCounter(PathInfo PI,string path)
        {
            //alternative recursive function to EnumerateFiles with AllFolders option
            //Result will be the same and Enumerate folders is simpler but
            //in case of link to some internal folder, infinite loop can occure.
            //to avoid this problem this function was created.

            if (Directory.Exists(path))
            {
                DirectoryInfo Dir = new DirectoryInfo(path);
                foreach(FileInfo Fi in Dir.EnumerateFiles())
                {
                    if (Fi.Length / 1000000 <= 10) PI.Less10++;
                    else if (Fi.Length / 1000000 <= 50) PI.Less50++;
                    else if (Fi.Length / 1000000 <= 100) PI.Less100++;
                    else PI.More100++;
                }
                foreach(DirectoryInfo subDir in Dir.EnumerateDirectories())
                {
                    FilesCounter(PI, subDir.FullName);
                }
                return PI;
            }
            else return PI;
        }

        public static PathInfo GetPathInfo(string path)
        {
            //This method collects all the needed data about location.
            //PathInfo is the model created in this application for
            //convinient convertation to JSON and sending as a response
            //to client side

            if (Directory.Exists(path))
            {
                PathInfo info = new PathInfo();
                info.currentPath = path;
                
                DirectoryInfo DirInfo = new DirectoryInfo(path);
                if(DirInfo.Parent != null)
                {
                    info.folders.Add("..");
                }

                DirInfo.EnumerateDirectories().ToList().ForEach(d => info.folders.Add(d.Name));
                info.folders.Sort();

                DirInfo.EnumerateFiles().ToList().ForEach(f => info.files.Add(f.Name));
                info.files.Sort();

                //Files.FilesCounter(info, path);

                //The following solution will count all the files in current folder and subfolders.
                //This is the method from System.IO
                //but links may cause the problem
                //To avoid this problem uncomment raw above and comment following foreach loop.

                foreach (FileInfo File in DirInfo.EnumerateFiles("*", SearchOption.AllDirectories))
                {
                    if (File.Length / 1000000 <= 10) info.Less10++;
                    else if (File.Length / 1000000 <= 50) info.Less50++;
                    else if (File.Length / 1000000 <= 100) info.Less100++;
                    else info.More100++;
                }
                return info;
            }
            else
            {
                throw new DirectoryNotFoundException();
            }
        }
    }


    [Route("")]
    public class HomeController : Controller
    {
        //This controller will define curret directory of application 
        //and collect first data. 
        //Then the page will be generated by server and model will be given to
        //angular controller
        private readonly IApplicationEnvironment _appEnv;
        public HomeController(IApplicationEnvironment appEnv)
        {
            _appEnv = appEnv;
        }

        public ActionResult Index()
        {
            string path = _appEnv.ApplicationBasePath;
            return View(Files.GetPathInfo(path));
        }
    }

    [Route("api/[controller]/[action]")]
    public class WebFTPController : Controller
    {
        // GET: api/WebFTP/action
        [HttpGet]
        public JsonResult GetDirInfo(string path, string directory)
        {
            //This Action is for listening of angular request for folder changing
            //Here will be defined exact path of directory to investigate.
            try
            {
                if(directory == "..")
                {
                    string[] pathArray = path.Split('\\').ToArray();
                    if (pathArray.Count() > 2)
                        path = string.Join("\\", pathArray.Take(pathArray.Count() - 1));
                    else
                        path = pathArray[0] + '\\';
                }
                else
                {
                    path = path + '\\' + directory;                    
                }
                return new JsonResult(Files.GetPathInfo(path));
            }
            catch(Exception ex)
            {
                Response.StatusCode = 400;
                return new JsonResult(ex.Message);
            }
        }

        [HttpGet]
        public FileContentResult Download(string path,string fileName)
        {
            //This Action needed for downloading the file.
            //Accessed by get request with a path and filename as a parameters
            //Server will find this file and send it to Client

            if (System.IO.File.Exists(path+'\\'+fileName))
            {
                Response.Headers.Add("Content-Disposition", "attachment; filename="+fileName);            
                return new FileContentResult(System.IO.File.ReadAllBytes(path + '\\' + fileName), "application/octet-stream");
            }
            else
            {
                Response.StatusCode = 400;
                return null;
            }
        }
    }
}
